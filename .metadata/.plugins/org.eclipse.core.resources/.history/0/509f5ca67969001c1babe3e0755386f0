Serialization:-> The process of writing state of an object to a file is called serialization.but strictly speaking
it is the process of converting an object from java supported form into either file supported form or network
supported form.
by using fileoutputstream and objectoutputstream classes we can implement serialization.

Deserialization:-> The process of reading state of an object from a file is called deserialization.but strictly 
speaking it is the process of converting an object from either file supported form or network supported form into
java supported form.
by using fileinputstream and objectinputstream classes we can implement deserialization.

Note: we can seialize only serializable objects.an object is said to be serializable if and only if the corresponding
implements serializable interface.serializable interface presents in java.io package and it doesn't contain any 
methods.it is a marker interface.
if we are trying to serialize non-serializable object then we will get runtime exception saying notserializable
exception.

Transient Keyword:-> transient modifier applicable only for variable but not for methods and classes.at the time of
serialization if we don't want to save the value of a particular variable to meet security constraints then we
should declare that varible as transient.
while performing serialization JVM ignores orginal value of transient variable and save default value to the file.
hence transient means not to serialize.

transient vs static:-> static variable won't participate in transient.static variable is not part of object state
and hence it won't participate in serialization.due to this declaring static variable as transient there is no use.

final vs transient:-> final variables will be participated in serialization directly by the value hence declaring a
final variable as transient there is no impact.

Note:-> if multiple objects are serialized into a single file then those objects can be deserialize on the order
they are serialized means first objects get deserialize first and last object deserialize at last.

we can serialize any no of objects to the file but in which order we serialized in the same order only we have to 
deserialize that is order of objects is important in serialization.
if we don't know order of objects in serialization.


Object Graph Serialization:-> whenever we are serializing an object,the set of all objects which are reachable 
from that objects will be serialized automatically. this group of objeccts is nothing but object graph.
in object graph every object should be serializable.if at least is not serializable then we will get runtime 
exception saying not serializable exception.

Customized Serialization:-> During default serialization there may be a chance of loss of information because of 
transient keyword.to recover this loss of information we should go for customized serialization.we can implement 
customized serilization using two methods
private void writeObject(ObjectOutputStream os)  throws Exception -> this method will be executed automatically at the time of serialization.
private void readObject(ObjectInputStream is) throws Exception -> this method will be executed automatically at the time of deserialization.

Note:
-> the above methods are callback methods because these are executed automatically by the JVM.
-> while performing which object serialization we have to do extraa work in the corresponding class we have to
define above methods.for example, while performing account object serialization if we required to do extraa work in
the account class we have to define above methods.

before serialization and after serialization account object can provide proper username and password.
Note:-programmer can't call private methods directly from outside of the class but JVM can call private methods 
directly from outside of the class.

Inheritance Serialization:-> 
-> Eventhough child class doesn't implement serializable we can serialize child class object if parents class
implements serializable interface that is serializable nature is inheriting from parent to child hence if parent
is serializable then by default every child is serializable.
-> EvenThough parent class doesn't implements serializable we can serialize child class object if child class implements
serializable interface that is to serialize child class object parent class need not be serializable.

-> At the time of serialization JVM will check is any variable inheriting from non-serializable parent or not.if any
variable inheriting from non-serializable parent then JVM ignores original value and save default value to the file.
-> At the time of deserialization JVM will check is any parent class non-serializable or not. if any parent class is non
serializable then JVM will execute instance control flow in every non-serializable parent and share it's instance variable
to the current object.
-> while executing instance control flow of non-serializable parent JVM will always call no arg constructor hence
every non-serializable class should compulsary contain no-arg constructor.it may be default constructor generated by
compiler or customized constructor explictly provided by programmer otherwise we will get runtime exception saying
invalid class exception.


Note:-> Object class doesn't implement serializable interface.

Externalization:->
-> In serialization everything takes care by JVM and the programmer doesnt have any control.
-> In serialization it is always posiible to save total object to the file and it is not posiible to save part of the
object,which may creates performance problems.
-> To overcome this problem we should go for externalization.
-> The main advantage of externalization over serialization is everything takes care by programmer and JVM doesn't have
any control.based on our requirement we can save either total object or part of the object, which improves performance of the
system.
->To provide externalizable ability for any java object compulsary the corresponding class should implement externalizable
interface.externalizable interface is the child interface of serializable only.externalizable interface defines two methods
writeExternal()
readExternal()
these metod will execute automatically at time of serialization and de-serialization.but strctly 
speaking at the time of deserialization JVM will create a separate new object by executing public
no arg constructor.on that object JVM will call readExteranl method.hence every externalizable
implemented class should compulsary contain public no arg constructor otherwise we will get runtime exception
saying InavlidClassException.
Note:serializable class should not compulsary have no arg constructor.JVM creates explictly.transient
keyword doesn't play any role in externalization.
Note:- Externalizable is a child interface of serializable.it also comes from 1.1 version.

Serialization Vs Externalization:->
-> it is meant for default serialization vs it is meant for customized serialization.
-> here everything takes care by JVM and programmer doesn't have any control vs here everything takes care by programmer and
JVM doesn't have any control.
-> in this case it is always possible to save total object to the file and it is not posiible to save part of the object vs
based on requirement we can save either total object or part of the object.
-> relatively performance is low vs relatively performance is high
-> it is the best choice if we want to save total object to the file vs it is the best choice if we want to save part of the
object to the file.
-> serializable interface doesn't contain any methods and it is a marker interface vs externalizable interface contain two
methods and it is not a marker interface.







